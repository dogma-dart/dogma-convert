// Copyright (c) 2015, the Dogma Project Authors.
// Please see the AUTHORS file for details. All rights reserved.
// Use of this source code is governed by a zlib license that can be found in
// the LICENSE file.

/// Contains the [LibraryGenerator] class.
library dogma.data.codegen.library_generator;

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:analyzer/src/generated/element.dart';

import 'codegen_helpers.dart';
import 'model_decoder_generator.dart';
import 'model_encoder_generator.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

class LibraryGenerator {
  //---------------------------------------------------------------------
  // Member variables
  //---------------------------------------------------------------------

  final LibraryElement library;
  final List<ModelDecoderGenerator> decoderGenerators = new List<ModelDecoderGenerator>();
  final List<ModelEncoderGenerator> encoderGenerators = new List<ModelEncoderGenerator>();

  //---------------------------------------------------------------------
  // Construction
  //---------------------------------------------------------------------

  LibraryGenerator(this.library) {
    var resolved = library.context.getResolvedCompilationUnit(library.source, library);

    // Get the types in the library
    for (var unit in library.units){
      for (var type in unit.types) {
        var declaration = findDeclaration(type, resolved);

        decoderGenerators.add(new ModelDecoderGenerator(type, declaration));
        encoderGenerators.add(new ModelEncoderGenerator(type, declaration));
      }
    }
  }

  void write(StringBuffer buffer) {
    // Write out the header
    buffer.writeln('// GENERATED CODE DO NOT MODIFY!');
    buffer.writeln('// Generated by the Dogma Data library on ${new DateTime.now().toIso8601String()}\n');

    // Write out the library information
    buffer.writeln('library ${library.name}_static;\n');

    // Write out the imports
    buffer.writeln('import \'dart:convert\';');
    buffer.writeln('import \'package:dogma_data/common.dart\';');
    buffer.writeln('import \'package:dogma_data/static.dart\';\n');

    // Write out each ModelDecoder
    for (var generator in decoderGenerators) {
      generator.writeDecoder(buffer);
    }

    // Write out the ModelDecoders
    buffer.writeln('class _Decoders implements ModelDecoders {');

    for (var generator in decoderGenerators) {
      var name = generator.element.name;

      buffer.writeln('  final ModelDecoder<$name> ${_toVariableName(name)} = new ${name}Decoder();');
    }

    buffer.writeln('}\n');

    // Write out each ModelEncoder
    for (var generator in encoderGenerators) {
      generator.writeEncoder(buffer);
    }

    // Write out the ModelEncoders
    buffer.writeln('class _Encoders implements ModelEncoders {');

    for (var generator in encoderGenerators) {
      var name = generator.element.name;

      buffer.writeln('  final ModelEncoder<$name> ${_toVariableName(name)} = new ${name}Encoder();');
    }

    buffer.writeln('}\n');

    // Write out the glue to the static library
    buffer.writeln('const _symbol = #${library.name};\n');

    buffer.writeln('void register() {');
    buffer.writeln('  registerDecoders(_symbol, new _Decoders());');
    buffer.writeln('  registerEncoders(_symbol, new _Encoders());');
    buffer.writeln('}\n');
  }

  static _toVariableName(String value) {
    var end = value.substring(1);
    var start = value.substring(0, 1).toLowerCase();

    return start + end;
  }
}
